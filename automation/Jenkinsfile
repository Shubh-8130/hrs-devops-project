pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        ECR_REPO = 'your-ecr-repo-name'
        IMAGE_TAG = 'latest'
        CLUSTER_NAME = 'app-cluster'
        DEPLOYMENT_NAME = 'your-k8s-deployment'
    }

    stages {
        stage('Install Dependencies') {
            steps {
                script {
                    // Install Java
                    sh '''
                    if ! command -v java &> /dev/null; then
                        echo "Installing Java..."
                        apt update && apt install -y openjdk-17-jdk
                    fi
                    java -version
                    '''

                    // Install Maven
                    sh '''
                    if ! command -v mvn &> /dev/null; then
                        echo "Installing Maven..."
                        apt install -y maven
                    fi
                    mvn -version
                    '''

                    // Install Docker
                    sh '''
                    if ! command -v docker &> /dev/null; then
                        echo "Installing Docker..."
                        apt install -y docker.io
                        systemctl start docker
                        systemctl enable docker
                        usermod -aG docker $(whoami)
                    fi
                    docker --version
                    '''

                    // Install AWS CLI
                    sh '''
                    if ! command -v aws &> /dev/null; then
                        echo "Installing AWS CLI..."
                        apt install -y awscli
                    fi
                    aws --version
                    '''
                }
            }
        }

        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/Shubh-8130/CineVisionMicroserviceProject.git'
            }
        }

        stage('Build Application') {
            steps {
                script {
                    if (fileExists('mvnw')) {
                        sh './mvnw clean package -DskipTests'
                    } else {
                        sh 'mvn clean package -DskipTests'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh '''
                    aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin your-account-id.dkr.ecr.$AWS_REGION.amazonaws.com
                    docker build -t $ECR_REPO:$IMAGE_TAG .
                    docker tag $ECR_REPO:$IMAGE_TAG your-account-id.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$IMAGE_TAG
                    '''
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    sh 'docker push your-account-id.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$IMAGE_TAG'
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    sh '''
                    aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME
                    kubectl apply -f k8s/deployment.yaml --dry-run=client
                    kubectl apply -f k8s/service.yaml --dry-run=client
                    '''
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment Successful!'
        }
        failure {
            echo 'Deployment Failed. Check logs for details.'
        }
    }
}
